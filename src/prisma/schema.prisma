generator client {
  provider = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(60)
  events  Event[]
  players Player[]
}

model Player {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  name          String          @db.VarChar(60)
  positionId    Int
  active        Boolean         @default(true)
  teamId        Int?
  position      Position        @relation(fields: [positionId], references: [id])
  team          Team?           @relation(fields: [teamId], references: [id])
  Notification  Notification[]
  registrations Registrations[]
}

model Event {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  title         String?
  time          DateTime
  location      String
  finesGiven    Boolean         @default(false)
  eventTypeSlug String
  teamId        Int?
  type          EventType       @relation(fields: [eventTypeSlug], references: [slug])
  team          Team?           @relation(fields: [teamId], references: [id])
  registrations Registrations[]
}

model EventType {
  slug  String  @id
  name  String
  event Event[]
}

model Registrations {
  playerId   Int
  eventId    Int
  time       DateTime  @default(now())
  updatedAt  DateTime?
  willArrive Boolean
  reason     String?
  event      Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  player     Player    @relation(fields: [playerId], references: [id])

  @@id([playerId, eventId])
}

model Position {
  id     Int      @id @default(autoincrement())
  title  String   @unique
  Player Player[]
}

model Notification {
  id           Int      @id @default(autoincrement())
  message      String
  expiringDate DateTime
  authorId     Int
  author       Player   @relation(fields: [authorId], references: [id])
}
