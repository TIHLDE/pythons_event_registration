generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MatchEventType {
  GOAL
  ASSIST
  YELLOW_CARD
  RED_CARD
  MOTM
}

enum Result {
  WIN
  LOSE
  DRAW
}

enum Position {
  KEEPER
  BACK
  CENTER_BACK
  MIDTFIELDER
  WINGER
  STRIKER
}

enum EventType {
  TRAINING
  MATCH
  SOCIAL
}

enum LeadershipRole {
  COACH
  ASSISTANT_COACH
  RESERVE_TEAM_COACH
  TEAM_LEADER
  FINES_MANAGER
  SOCIAL_MANAGER
  FINANCE_MANAGER
}

model Team {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(60)
  events  Event[]
  players Player[]
  Match   Match[]
}

model Player {
  id                   Int                    @id @default(autoincrement())
  tihlde_user_id       String
  createdAt            DateTime               @default(now())
  name                 String                 @db.VarChar(60)
  active               Boolean                @default(true)
  disableRegistrations Boolean                @default(false)
  teamId               Int?
  position             Position               @default(KEEPER)
  team                 Team?                  @relation(fields: [teamId], references: [id])
  notifications        Notification[]
  registrations        Registrations[]
  matchEvents          MatchEvent[]
  LeadershipPeriodRole LeadershipPeriodRole[]
}

model Event {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  title         String?
  time          DateTime
  location      String
  description   String          @default("")
  finesGiven    Boolean         @default(false)
  eventType     EventType       @default(SOCIAL)
  teamId        Int?
  team          Team?           @relation(fields: [teamId], references: [id])
  registrations Registrations[]
  matchId       Int?
  match         Match?
}

model Registrations {
  playerId   Int
  eventId    Int
  time       DateTime  @default(now())
  updatedAt  DateTime?
  willArrive Boolean
  reason     String?
  event      Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  player     Player    @relation(fields: [playerId], references: [id])

  @@id([playerId, eventId])
}

model Notification {
  id           Int      @id @default(autoincrement())
  message      String
  expiringDate DateTime
  authorId     Int
  author       Player   @relation(fields: [authorId], references: [id])
}

model Match {
  id          Int          @id @default(autoincrement())
  result      Result?
  homeGoals   Int          @default(0)
  awayGoals   Int          @default(0)
  matchEvents MatchEvent[]
  eventId     Int          @unique
  teamId      Int
  team        Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  event       Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model MatchEvent {
  id       Int            @id @default(autoincrement())
  type     MatchEventType
  matchId  Int
  playerId Int
  match    Match          @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player   Player         @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

model LeadershipPeriod {
  id                   Int                    @id @default(autoincrement())
  startDate            DateTime
  endDate              DateTime
  leadershipPeriodRole LeadershipPeriodRole[]
}

model LeadershipPeriodRole {
  id       Int              @id @default(autoincrement())
  role     LeadershipRole
  periodId Int
  playerId Int
  period   LeadershipPeriod @relation(fields: [periodId], references: [id], onDelete: Cascade)
  player   Player           @relation(fields: [playerId], references: [id], onDelete: Cascade)
}
